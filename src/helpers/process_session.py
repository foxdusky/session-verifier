import asyncio
import json
import os
import re
import zipfile

import rarfile
from telethon import TelegramClient
from telethon.errors import PhoneCodeInvalidError, AuthRestartError

from config import logger, settings, GET_RANDOM_PROXY
from schemes.processing_result import ProcessingResult


async def _process_session(phone: str, api_id: int, api_hash: str) -> ProcessingResult | None:
    proxy = GET_RANDOM_PROXY
    session_renewed = False
    spam_blocked = False
    old_session_path: str = os.path.join(settings.TEMP_DIR, phone + ".session")  # type: ignore
    new_session_name: str = os.path.join(settings.SESSION_DIR, phone)  # type: ignore

    if not os.path.exists(old_session_path):
        logger.info(f"[!] –ù–µ—Ç session —Ñ–∞–π–ª–∞ –¥–ª—è {phone}, –ø—Ä–æ–ø—É—Å–∫.")
        return None
    try:
        client1 = TelegramClient(old_session_path, api_id, api_hash)
        await client1.connect()

        if not await client1.is_user_authorized():
            logger.info(f"[!] –°–µ—Å—Å–∏—è {phone} –Ω–µ–≤–∞–ª–∏–¥–Ω–∞.")
            await client1.disconnect()
            return None

        client2 = TelegramClient(new_session_name, api_id, api_hash)
        await client2.connect()
        if not client2.is_connected():
            logger.info(f"[‚ùå] client2 –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –¥–ª—è {phone}")
            await client2.disconnect()
            await client1.disconnect()
            return None

        try:
            await client2.send_code_request(phone)
        except AuthRestartError:
            logger.info(f"[‚ùå] Telegram —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è {phone}")
            await client2.disconnect()
            await client1.disconnect()
            return None

        logger.info(f"[üì®] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –¥–ª—è {phone} ‚Äî –∂–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram...")
        await asyncio.sleep(3)

        code = None
        async for msg in client1.iter_messages('Telegram', limit=10):
            match = re.search(r'\b\d{5}\b', msg.message)
            if match:
                code = match.group(0)
                logger.info(f"[‚úì] –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω: {code}")
                break

        if not code:
            logger.info(f"[‚ùå] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è {phone}")
            await client2.disconnect()
            client2 = client1
        else:
            try:
                await client2.sign_in(phone=phone, code=code)
                logger.info(f"[üîê] –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {phone}")
                session_renewed = True
            except PhoneCodeInvalidError:
                logger.info(f"[‚ùå] –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {phone}")
                await client1.disconnect()
                await client2.disconnect()
                return None

        await client2.send_message('@SpamBot', '/start')
        await asyncio.sleep(3)

        async for msg in client2.iter_messages('@SpamBot', limit=1):
            text = msg.message.lower()
            if 'limited' in text or 'spam' in text:
                spam_blocked = True
        await client1.disconnect()
        await client2.disconnect()

    except Exception as e:
        logger.error(f"[–û—à–∏–±–∫–∞] {phone}: {e}")
    return ProcessingResult(session_phone=phone, spam_blocked=spam_blocked, renewed_session=session_renewed)


async def process_archive(archive_name: str) -> list[ProcessingResult | None]:
    archive_path = os.path.join(settings.TEMP_DIR, archive_name)
    tasks = []

    try:
        if archive_path.endswith('.rar'):
            with rarfile.RarFile(archive_path) as rf:
                try:
                    rf.extractall(settings.TEMP_DIR)
                    logger.info(f"[‚úì] –ê—Ä—Ö–∏–≤ {archive_name} —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω.")
                except rarfile.BadRarFile as e:
                    logger.error(f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ RAR –∞—Ä—Ö–∏–≤–∞ {archive_name}: {e}")
                    return []
        else:
            with zipfile.ZipFile(archive_path, 'r') as zf:
                try:
                    zf.extractall(settings.TEMP_DIR)
                    logger.info(f"[‚úì] –ê—Ä—Ö–∏–≤ {archive_name} —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω.")
                except zipfile.BadZipFile as e:
                    logger.error(f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ ZIP –∞—Ä—Ö–∏–≤–∞ {archive_name}: {e}")
                    return []
    except FileNotFoundError:
        logger.error(f"[‚ùå] –ê—Ä—Ö–∏–≤ {archive_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []

    for filename in os.listdir(settings.TEMP_DIR):
        if not filename.endswith('.json'):
            continue

        json_path = os.path.join(settings.TEMP_DIR, filename)
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        phone = data["phone"]
        api_id = data["app_id"]
        api_hash = data["app_hash"]

        tasks.append(_process_session(phone, api_id, api_hash))

    return await asyncio.gather(*tasks)
